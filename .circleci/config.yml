# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@1.8.4

commands:
  activate-service-account:
    steps:
      - run:
          name: Activate GCP service account
          command: |
              GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
              echo ${GCLOUD_SERVICE_KEY} > ${GOOGLE_APPLICATION_CREDENTIALS}
              echo "export GOOGLE_APPLICATION_CREDENTIALS=\"${GOOGLE_APPLICATION_CREDENTIALS}\"" >> $BASH_ENV
              gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}

              gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
              gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}

  setup-python-venv:
    description: Set up and create Python venv.
    parameters:
      yogadl:
        type: boolean
        default: false
      extras-requires:
        type: string
        default: ""
      extra-requirements-file:
        type: string
        default: ""
      use-pyenv:
        type: boolean
        default: false
    steps:
      - when:
          condition: <<parameters.use-pyenv>>
          steps:
            - run: pyenv install 3.7.10
            - run: pyenv global 3.7.10
      - run: pip3 install --upgrade pip wheel setuptools

      # Put all the pip requirements into a single /tmp/requirements.txt file.
      - run: echo <<parameters.extras-requires>> > /tmp/requirements.txt
      - run: cat <<parameters.extra-requirements-file>> >> /tmp/requirements.txt
      - run: cat /tmp/requirements.txt >> /tmp/cachefile
      - when:
          condition: <<parameters.yogadl>>
          steps:
            - run: python3 setup.py bdist_wheel -d /tmp
            - run: pip3 install /tmp/yogadl*.whl
            - run: pip3 install --no-deps --force-reinstall /tmp/yogadl*.whl
      - run: pip3 install -r /tmp/requirements.txt
      # Useful diagnostics for test failures.
      - run: pip3 freeze

jobs:
  lint:
    docker:
    - image: cimg/python:3.7
    steps:
      - checkout
      - setup-python-venv:
          extra-requirements-file: "requirements.txt"
      - run: make check

  test:
    parameters:
      test-target:
        type: string
      tensorflow-version:
        type: string
        default: "2.4.1"
      gcp:
        type: boolean
        default: false
    machine:
      image: ubuntu-2004:202104-01
    steps:
      - checkout
      - setup-python-venv:
          yogadl: true
          use-pyenv: true
          extras-requires: "tensorflow==<<parameters.tensorflow-version>>"
          extra-requirements-file: "requirements.txt"
      - when:
          condition: <<parameters.gcp>>
          steps:
            - gcp-cli/install
            - activate-service-account
      - run: make <<parameters.test-target>>

workflows:
  lint:
    jobs:
      - lint

  test:
    jobs:
      - test:
          context: aws
          matrix:
            parameters:
              test-target: ["test-integration-aws"]
              tensorflow-version: ["1.15.5", "2.4.1"]

      - test:
          context: aws
          matrix:
            parameters:
              test-target: ["test-unit-aws"]

      - test:
          context: gcp
          matrix:
            parameters:
              test-target: ["test-integration-gcp"]
              tensorflow-version: ["1.15.5", "2.4.1"]
              gcp: [true]

      - test:
          context: gcp
          matrix:
            parameters:
              test-target: ["test-unit-gcp"]
              gcp: [true]

      - test:
          matrix:
            parameters:
              test-target: ["test-integration-local"]
              tensorflow-version: ["2.4.1"]  # Note: local examples don't support 1.15.5

      - test:
          matrix:
            parameters:
              test-target: ["test-unit-local"]
